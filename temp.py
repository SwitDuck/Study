# -*- coding: utf-8 -*-

##Присваивание кортежей
'''for (a,b,c) in [(1,2,3), (4,5,6), (7,8,9)]:
    print(b)
for ((a,b),c) in [((1,2),3), ((4,5),6), ((7,8),9)]:
    print(a)
'''

##range(n) - создание непрерывного списка чисел 1-n

##разделение последовательности на начальную и остальную части в цикле
""" L = list(range(10))
while L:
    front, L = L[0], L[1:]
    print(front, L)
"""

##Расширенная операция распаковывания(работает как с кортежами,числами,списками,строками)
'''
seq = [1,2,3,4]
a, *b = seq
print(a, b)
*a, b = seq
print(a, b)

#извлечение среза
S = 'spam'
S[0], S[1:3], S[3]
'''

##Экранирование последовательности
'''
\a
\b
\'
\\
\n
\f
'''
#path = r'C:\Users\Здравствуйте господи\Desktop\Новая папка\data.txt'
#print(path)
#print('try to {0} the {1}'.format('format', 'strings'))


#Спецификаторы формата
'''
В общем виде синтаксис использования спецификатора формата 
выглядит следующим образом:
    %[(name)][flags][width][.precision]code
Символ спецификатора формата (code) из табл. 7.4 располагается в самом кон-
це.
'''
'''
x = 1.23456789 
print('%e | %f | %g' % (x, x, x))
print('%E' % x)
'''
'''
reply = """                # Шаблон с замещаемыми спецификаторами формата
Greetings...
Hello %(name)s!
Your age squared is %(age)s
"""
values = {'name': 'Bob', 'age': 40}   
print(reply % values) 
'''

'''
Как и оператор форматирования %, метод format обладает дополнительными 
возможностями. Например, в строках формата допускается ссылаться на име-
на атрибутов объектов и ключи словарей, – как и в привычном синтаксисе 
языка PPyython, квадратные скобки обозначают ключи словаря, а точка приме-

thon,,  квадратные скобки обозначают ключи словаря, а точка приме-

квадратные скобки обозначают ключи словаря, а точка приме-
няется для организации доступа к атрибутам объектов, на которые ссылаются 
позиционные или именованные спецификаторы
'''
'''
import sys
'My {1[spam]} runs {0.platform}'.format(sys, {'spam': 'laptop'})
print('My {config[spam]} runs {sys.platform}'.format(sys=sys, config={'spam': 'laptop'}))
'''

